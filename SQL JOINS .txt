create table orders(
	id INT PRIMARY KEY AUTO_INCREMENT,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id int,
    FOREIGN KEY 
		(customer_id) 
			REFERENCES 
				customers(ID)
);



create table customers (
	ID INT PRIMARY KEY auto_increment,
    first_name varchar(50),
    last_name varchar(50),
    email varchar(50)
);


INSERT INTO customers (first_name, last_name, email) 
VALUES ('Boy', 'George', 'george@gmail.com'),
       ('George', 'Michael', 'gm@gmail.com'),
       ('David', 'Bowie', 'david@gmail.com'),
       ('Blue', 'Steele', 'blue@gmail.com'),
       ('Bette', 'Davis', 'bette@aol.com');
       
       
INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016-02-10', 99.99, 1),
       ('2017-11-11', 35.50, 1),
       ('2014-12-12', 800.67, 2),
       ('2015-01-03', 12.50, 2),
       ('1999-04-11', 450.25, 5);



#### CROSS JOIN (CARTESIAN JOIN)  CONNECT EVERYTHING WITH ALL

-- To perform a (kind of useless) cross join:
SELECT * FROM customers, orders;



##### INNER JOIN

select * from customers
		join orders
        on customers.id=orders.customer_id;

    SELECT 
        first_name, last_name, SUM(amount) AS total
    FROM
        customers
            JOIN
        orders ON orders.customer_id = customers.id
    GROUP BY first_name , last_name
    ORDER BY total;



##### LEFT JOIN


    SELECT 
        first_name, last_name, order_date, amount
    FROM
        customers
            LEFT JOIN
        orders ON orders.customer_id = customers.id;
     
     
    SELECT 
        order_date, amount, first_name, last_name
    FROM
        orders
            LEFT JOIN
        customers ON orders.customer_id = customers.id;



###### IFNULL()   FUNCTION

    SELECT 
        first_name, 
        last_name, 
        IFNULL(SUM(amount), 0) AS money_spent
    FROM
        customers
            LEFT JOIN
        orders ON customers.id = orders.customer_id
    GROUP BY first_name , last_name;



##### ON DELETE CASCADE FUNCTION

    
    CREATE TABLE orders (
        id INT PRIMARY KEY AUTO_INCREMENT,
        order_date DATE,
        amount DECIMAL(8 , 2 ),
        customer_id INT,
        FOREIGN KEY (customer_id)
            REFERENCES customers (id)
            ON DELETE CASCADE
    );



#### TASKS


SELECT 
    first_name, title, grade
FROM
    papers
        JOIN
    students ON papers.student_id = students.id
ORDER BY grade DESC;


## TASK 2

SELECT 
    first_name, title, grade
FROM students left JOIN
    papers ON papers.student_id = students.id;

#### TASK 3

SELECT 
    first_name, IFNULL(title,"MISSING") as Title, IFNULL(grade,"0") as Grade
FROM students left JOIN
    papers ON papers.student_id = students.id;


#### TASK 4

select first_name, IFNULL(round(avg(grade),3),"0") as Average from students
		left join papers 
        on students.id = papers.student_id
        group by first_name
        Order by Average desc;

### 

    SELECT 
        title, rating
    FROM
        series
            JOIN
        reviews ON series.id = reviews.series_id;


###

SELECT 
    title, AVG(rating) AS Average_Rating
FROM
    series
        JOIN
    reviews ON series.id = reviews.series_id
GROUP BY title
ORDER BY Average_Rating ASC;



###


select first_name,last_name, rating from reviewers 
cross join reviews
on reviewers.id = reviews.reviewer_id;


#### JOINING 3 TABLES AT ONCE  -  IMPORTANT!!!

select * from reviewers
join reviews
on reviewers.id = reviews.reviewer_id
join series
on reviewers.id = series.id;

####  IMPORTANT!!!

select * from series left join reviews
on series.id = reviews.series_id 
where series.id between 11 and 12;



####  IMPORTANT!!!

select * from series left join reviews
on series.id = reviews.series_id 
where rating is null;




####

select genre, avg(rating) as avg_rating from series
join reviews
on series.id = reviews.id
group by genre;


#####


SELECT 
    first_name,
    last_name,
    COUNT(rating) AS Ratings,
    MIN(rating) AS Min_Rating,
    MAX(rating) AS Max_Rating,
    AVG(rating) AS Average_Rating,
    CASE
        WHEN COUNT(rating) = 0 THEN 'INACTIVE'
        ELSE 'ACTIVE'
    END AS Status
FROM
    reviewers
        LEFT JOIN
    reviews ON reviewers.id = reviews.reviewer_id
GROUP BY first_name , last_name;



#### TASKS


    SELECT 
        title,
        rating,
        CONCAT(first_name, ' ', last_name) AS reviewer
    FROM
        reviews
            INNER JOIN
        series ON reviews.series_id = series.id
            INNER JOIN
        reviewers ON reviews.reviewer_id = reviewers.id;
     
     
     
    SELECT 
        title,
        rating,
        CONCAT(first_name, ' ', last_name) AS reviewer
    FROM
        series
            INNER JOIN
        reviews ON reviews.series_id = series.id
            INNER JOIN
        reviewers ON reviews.reviewer_id = reviewers.id;
     
     
     
    SELECT 
        title,
        rating,
        CONCAT(first_name, ' ', last_name) AS reviewer
    FROM
        reviewers
            INNER JOIN
        reviews ON reviews.reviewer_id = reviewers.id
            INNER JOIN
        series ON reviews.series_id = series.id;

######  CASE WHEN + JOIN

SELECT 
    *,
    CASE
        WHEN se.title IS NULL THEN 0
        ELSE 1
    END AS if_in_series
FROM
    books b
        LEFT JOIN
    series2 se ON b.released_year = se.released_year;
